help(gsva)
BiocManager::install("GSVA")
help(gsva)
library(GSVA)
help(gsva)
gsva(expr, gset,method="gsva",rnaseq=TRUE)
gsva(expr, gset,method="gsva",     abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kernel=TRUE, ssgsea.norm=TRUE)
gset=getGmt( c("/Users/takamatsushiro/Desktop/DRY_analysis/Kyodai_Lab_curated/202003_Mise/ssGSEA/converted_mouse_GMT_files/mouse_DESeq_only_serous_up_genes_104_f1.5_m2_r0.001.gmt",
"/Users/takamatsushiro/Desktop/DRY_analysis/Kyodai_Lab_curated/202003_Mise/ssGSEA/converted_mouse_GMT_files/mouse_DESeq_only_serous_up_genes_143_f1.25_m2_r0.001.gmt"))
gset=getGmt( c("/Users/takamatsushiro/Desktop/DRY_analysis/Kyodai_Lab_curated/202003_Mise/ssGSEA/converted_mouse_GMT_files/mouse_DESeq_only_serous_up_genes_104_f1.5_m2_r0.001.gmt"))
gset=getGmt("/Users/takamatsushiro/Desktop/DRY_analysis/R_project/ssGSEA_GMT_files/MsigDB_v7_all/h.all.v7.0.symbols.gmt")
gsva(expr, gset,method="gsva",     abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kernel=TRUE, ssgsea.norm=TRUE)
gsva(expr, gset,method="gsva",     abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
res_ssgsea=gsva(expr, gset,method="ssgsea",     abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
#rnaseq=TRUE)
res_ssgsea
res_gsva
res_gsva=gsva(expr, gset,method="gsva",     abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
res_gsva
#rnaseq=TRUE)
res_ssgsea
zscore(res_ssgsea)
scale(res_ssgsea)
scale(t(res_ssgsea))
res_gsva
gmt_files=list.files("/Users/takamatsushiro/Desktop/DRY_analysis/R_project/ssGSEA_GMT_files/MsigDB_v7_all/",full.names = T)
gmt_files
gset=getGmt(gmt_files)
gset=getGmt(gmt_files[1])
gset=getGmt(gmt_files[2])
gset=getGmt(gmt_files[1:2])
gset=getGmt(gmt_files[1])
gset
gset=getGmt(gmt_files[2])
res_gsva=gsva(expr, gset,method="gsva",     abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
res_gsva
write.table(res_gsva,"hoge.gsva.tsv",sep="\t")
res_ssgsea=gsva(expr, gset,method="ssgsea",     abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
#rnaseq=TRUE)
res_ssgsea
gsets=list()
gmt_files=list.files("/Users/takamatsushiro/Desktop/DRY_analysis/R_project/ssGSEA_GMT_files/MsigDB_v7_all/",full.names = T)
gmt_files
gsets=list()
for (gmt_file in gmt_files){
gset=getGmt(gmt_file)
gsets=c(gsets,list(gset) )
}
gsets
gsets=list()
for (gmt_file in gmt_files[1:5]){
gset=getGmt(gmt_file)
gsets=c(gsets,list(gset) )
}
res_gsva=gsva(expr, gsets,method="gsva", abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
res_gsva
write.table(res_gsva,"hoge.gsva.tsv",sep="\t")
gsets
gsets[2]
gsets[4]
res_gsva=gsva(expr, gsets[4],method="gsva", abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
expr=read.delim("/Users/takamatsushiro/Desktop/DRY_analysis/Kyodai_Lab_curated/202001_Kakimi_sequense/processed_data/Todai_kakimi_OV_202006_tpm_gs_merged.txt"
,row.names = 1)
expr=as.matrix(expr)
head(expr)
gmt_files=list.files("/Users/takamatsushiro/Desktop/DRY_analysis/R_project/ssGSEA_GMT_files/MsigDB_v7_all/",full.names = T)
gmt_files
gsets=list()
gsets[4]
for (gmt_file in gmt_files[1:5]){
gset=getGmt(gmt_file)
gsets=c(gsets,list(gset) )
}
gsets
res_gsva=gsva(expr, gsets,method="gsva", abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
gsets
res_gsva
res_gsva=gsva(expr, gsets[4],method="gsva", abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
res_gsva=gsva(expr, gsets[1],method="gsva", abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
gsets[1]
gsets[1][1]
gsets=list()
for (gmt_file in gmt_files[1]){
gset=getGmt(gmt_file)
gsets=c(gsets,list(gset) )
}
gsets[1][1]
res_gsva=gsva(expr, gsets[1],method="gsva", abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
gsets=getGmt(gmt_files[1])
res_gsva=gsva(expr, gsets,method="gsva", abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
res_gsva
res_gsvas=data.frame()
gmt_files=list.files("/Users/takamatsushiro/Desktop/DRY_analysis/R_project/ssGSEA_GMT_files/MsigDB_v7_all/",full.names = T)
gmt_files
res_gsvas=data.frame()
for (gmt_file in gmt_files[1:2]){
gset=getGmt(gmt_file)
add=gsva(expr, gsets,method="gsva",
min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
res_gsva=cbind(res_gsva,add)
}
res_gsva
write.table(res_gsva,"hoge.gsva.tsv",sep="\t",quote=F)
for (gmt_file in gmt_files[1:2]){
gset=getGmt(gmt_file)
add=gsva(expr, gsets,method="gsva",
min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
res_gsva=rbind(res_gsva,add)
}
write.table(res_gsva,"hoge.gsva.tsv",sep="\t",quote=F)
add
gset=getGmt(gmt_file[2])
gset=getGmt(gmt_files[2])
res_gsva2=gsva(expr, gsets,method="gsva", abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
res_gsva2
gset=getGmt(gmt_files[1])
res_gsva1=gsva(expr, gsets,method="gsva", abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
res_gsva1
gmt_files
gmt_files[1]
gmt_files[2]
gset=getGmt(gmt_files[1])
res_gsva1=gsva(expr, gset,method="gsva", abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
gset=getGmt(gmt_files[2])
res_gsva2=gsva(expr, gset,method="gsva", abs.ranking=FALSE, min.sz=1, max.sz=Inf,
kcdf="Poisson", ssgsea.norm=TRUE)
res_gsva=data.frame()
rbind(res_gsva1,res_gsva2)
res_gsva=rbind(res_gsva1,res_gsva2)
write.table(res_gsva,"hoge.gsva.tsv",sep="\t",quote=F)
res_gsva=data.frame()
for (gmt_file in gmt_files[1:3]){
gset=getGmt(gmt_file)
add=gsva(expr, gset, method="gsva",
min.sz=1, max.sz=Inf,
kcdf="Gaussian")
res_gsva=rbind(res_gsva,add)
}
write.table(res_gsva,"hoge.gsva.tsv",sep="\t",quote=F)
install.packages("TCGAutils")
BiocManager::install("TCGAutils")
BiocManager::install("TCGAutils")
getwd()
# TCGA utils
library("TCGAutils")
UUID="23742330-492f-4ec3-a575-b5f4eb960e85"
PID=UUIDtoBarcode(file, from_type = "case_id")
PID=UUIDtoBarcode(file, from_type = "file_id")
UUID="3c7ea150-a119-4cd1-a7ef-1543ef87eebf"
#23742330-492f-4ec3-a575-b5f4eb960e85"
PID=UUIDtoBarcode(file, from_type = "case_id")
#23742330-492f-4ec3-a575-b5f4eb960e85"
UUIDtoBarcode(file, from_type = "case_id")
#23742330-492f-4ec3-a575-b5f4eb960e85"
UUIDtoBarcode(file, from_type = "aliquot_ids")
#23742330-492f-4ec3-a575-b5f4eb960e85"
UUIDtoBarcode(file, from_type = "file_id")
library("scarHRD")
loas("/Users/takamatsushiro/Downloads/B_cell.Cellview.Rds")
load("/Users/takamatsushiro/Downloads/B_cell.Cellview.Rds")
featuredata
log2cpm
r
version
install.packages("scran")
BiocManager::install("scran")
install.packages("BiocManager"
()
install.packages("BiocManager")
BiocManager::install("scran")
BiocManager::install("scater")
install.packages('Seurat')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(scater)
library(scran)
library(Seurat)
options(stringsAsFactors = FALSE)
set.seed(32546)
system("curl -O http://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_v3/pbmc_1k_v3_filtered_feature_bc_matrix.h5")
# setwd("~/scrna-seq2019/day1/2-normalization/")
pbmc.mat <- Read10X_h5("pbmc_1k_v3_filtered_feature_bc_matrix.h5")
install.packages("hdf5r")
# setwd("~/scrna-seq2019/day1/2-normalization/")
pbmc.mat <- Read10X_h5("pbmc_1k_v3_filtered_feature_bc_matrix.h5")
# setwd("~/scrna-seq2019/day1/2-normalization/")
pbmc.mat <- Read10X_h5("./pbmc_1k_v3_filtered_feature_bc_matrix.h5")
# setwd("~/scrna-seq2019/day1/2-normalization/")
pbmc.mat <- Read10X_h5("../../pbmc_1k_v3_filtered_feature_bc_matrix.h5")
pbmc.sce <- SingleCellExperiment(assays = list(counts = as.matrix(pbmc.mat)))
pbmc.sce <- pbmc.sce[rowSums(counts(pbmc.sce) > 0) > 2,]
isSpike(pbmc.sce, "MT") <- grepl("^MT-", rownames(pbmc.sce))
isSpike()
pbmc.sce <- calculateQCMetrics(pbmc.sce)
colnames(colData(pbmc.sce))
knitr::opts_chunk$set(echo = TRUE)
v3.1k <- Read10X_h5("../../pbmc_1k_v3_filtered_feature_bc_matrix.h5", use.names = T)
suppressMessages(require(Matrix))
v2.1k <- Read10X_h5("../../pbmc_1k_v2_filtered_feature_bc_matrix.h5", use.names = T)
v2.1k <- Read10X_h5("../../pbmc_1k_v2_filtered_feature_bc_matrix.h5", use.names = T)
p3.1k <- Read10X_h5("../../pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5", use.names = T)
# select only gene expression data from the CITE-seq data.
p3.1k <- p3.1k$`Gene Expression`
sdata.v2.1k <- CreateSeuratObject(v2.1k, project = "v2.1k")
v2.1k
sdata.v3.1k <- CreateSeuratObject(v3.1k, project = "v3.1k")
sdata.p3.1k <- CreateSeuratObject(p3.1k, project = "p3.1k")
# merge into one single seurat object. Add cell ids just in case you have overlapping barcodes between the datasets.
alldata <- merge(sdata.v2.1k, c(sdata.v3.1k,sdata.p3.1k), add.cell.ids=c("v2.1k","v3.1k","p3.1k"))
# also add in a metadata column that indicates v2 vs v3 chemistry
chemistry <- rep("v3",ncol(alldata))
chemistry[Idents(alldata) == "v2.1k"] <- "v2"
alldata <- AddMetaData(alldata, chemistry, col.name = "Chemistry")
alldata
# check number of cells from each sample, is stored in the orig.ident slot of metadata and is autmatically set as active ident.
table(Idents(alldata))
head(alldata@meta.data)
mt.genes <- rownames(alldata)[grep("^MT-",rownames(alldata))]
C<-GetAssayData(object = alldata, slot = "counts")
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
alldata <- AddMetaData(alldata, percent.mito, col.name = "percent.mito")
rb.genes <- rownames(alldata)[grep("^RP[SL]",rownames(alldata))]
percent.ribo <- colSums(C[rb.genes,])/Matrix::colSums(C)*100
alldata <- AddMetaData(alldata, percent.ribo, col.name = "percent.ribo")
VlnPlot(alldata, features = "nFeature_RNA", pt.size = 0.1) + NoLegend()
VlnPlot(alldata, features = "nCount_RNA", pt.size = 0.1) + NoLegend()
```{r vln.plot}
VlnPlot(alldata, features = "nFeature_RNA", pt.size = 0.1) + NoLegend()
VlnPlot(alldata, features = "nCount_RNA", pt.size = 0.1) + NoLegend()
VlnPlot(alldata, features = "percent.mito", pt.size = 0.1) + NoLegend()
VlnPlot(alldata, features = "percent.ribo", pt.size = 0.1) + NoLegend()
FeatureScatter(alldata, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
FeatureScatter(alldata, feature1 = "nFeature_RNA", feature2 = "percent.mito")
FeatureScatter(alldata, feature1="percent.ribo", feature2="nFeature_RNA")
FeatureScatter(alldata, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", cells = WhichCells(alldata, expression = orig.ident == "v3.1k") )
#select cells with percent.mito < 25
selected <- WhichCells(alldata, expression = percent.mito < 25)
alldata
#start with cells with many genes detected.
high.det.v3 <- WhichCells(data.filt, expression = nFeature_RNA > 4100)
# and subset the object to only keep those cells
data.filt <- subset(alldata, cells = selected)
#select cells with percent.mito < 25
selected <- WhichCells(alldata, expression = percent.mito < 25)
alldata$percent.mito
hist( alldata$percent.mito)
WhichCells()
?WhichCells()
#select cells with percent.mito < 25
selected <- WhichCells(alldata, expression = `percent.mito` < 25)
#select cells with percent.mito < 25
selected <- WhichCells(alldata, expression = percent.mito< 25)
?FetchData()
?WhichCells()
#select cells with percent.mito < 25
selected <- WhichCells(object=alldata, expression = percent.mito<0.25)
alldata
FeatureScatter(alldata, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
FeatureScatter(alldata, feature1 = "nFeature_RNA", feature2 = "percent.mito")
FeatureScatter(alldata, feature1="percent.ribo", feature2="nFeature_RNA")
FeatureScatter(alldata, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
FeatureScatter(alldata, feature1 = "nFeature_RNA", feature2 = "percent.mito")
FeatureScatter(alldata, feature1="percent.ribo", feature2="nFeature_RNA")
alldata
#select cells with percent.mito < 25
selected <- WhichCells(object=alldata, expression = percent.mito<0.25)
alldata <- AddMetaData(alldata, percent.mito, col.name = "percent.mito")
alldata
percent.mito <- colSums(C[mt.genes,])/Matrix::colSums(C)*100
percent.mito
alldata <- AddMetaData(alldata, percent.mito, col.name = "percent.mito")
alldata
install_github("akdess/CaSpER")
require(devtools)
install_github("akdess/CaSpER")
library("CaSpER")
BiocManager::install(version='devel')
BiocManager::install("SpatialCPie")
library("SpatialCPie")
library("Seurat")
install.packages('Seurat')
install.packages("Seurat")
library("Seurat")
library(maftools
)
jonckheere.test()
install.packages('clinfun')
library(clinfun)
?jonckheere.test()
df=read.delim("/Users/takamatsushiro/Desktop/DRY_analysis/GEO_Data_Analysis/GSE6008/GSE6008_exp_gs_max.txt")
df
gexp=read.delim("/Users/takamatsushiro/Desktop/DRY_analysis/GEO_Data_Analysis/GSE6008/GSE6008_exp_gs_max.txt",
row.names = 1)
gexp
gexp["HIF1A",:]
gexp["HIF1A",]
gexp[c("HIF1A","HIF1B"),]
gexp[c("HIF1A","HIF2A"),]
gexp[c("HIF1A","HIF2"),]
gexp[c("HIF1A","HIF2"),]
gexp[c("HIF1A","EPAS2"),]
gexp[c("HIF1A","EPAS1"),]
gexp
mean(gexp)
mean(gexp[0,
])
mean(gexp[0,])
scale(gexp)
gexp[c("HIF1A","EPAS1","GAPDH"),]
tmp=gexp[c("HIF1A","EPAS1","GAPDH"),]
heatmap(tmp)
heatmap(as.matrix(tmp))
heatmap(as.matrix(tmp),Rowv = F,Colv = F)
heatmap(as.matrix(tmp), Rowv = NA,Colv = NA,col=cm.colors(256))
tmp_z=scale(tmp)
tmp_z
heatmap(as.matrix(tmp), Rowv = NA,Colv = NA,col=cm.colors(256))
heatmap(as.matrix(tmp_z), Rowv = NA,Colv = NA,col=cm.colors(256))
heatmap(as.matrix(tmp), Rowv = NA,Colv = NA,col=cm.colors(256))
tmp[1,]
tmp=gexp[c("HIF1A","EPAS1","GAPDH"),]
tmp[1,]=tmp[1,]+2
tmp[3,]=tmp[3,]-2
heatmap(as.matrix(tmp), Rowv = NA,Colv = NA,col=cm.colors(256))
tmp[1,]
tmp[2,]
heatmap(as.matrix(tmp), Rowv = NA,Colv = NA,col=cm.colors(256),
scale = F)
heatmap(as.matrix(tmp), Rowv = NA,Colv = NA,col=cm.colors(256),
scale = "none")
tmp_z=scale(tmp)
tmp_z
heatmap(as.matrix(tmp_z), Rowv = NA,Colv = NA,col=cm.colors(256))
# virtual data
tmp=gexp[c("HIF1A","EPAS1","GAPDH"),]
tmp[1,]=tmp[1,]+2
tmp[3,]=tmp[3,]-2
# if you do not normalize data
heatmap(as.matrix(tmp), Rowv = NA,Colv = NA,col=cm.colors(256),
scale = "none")
# normalization by z-scale
tmp_z=scale(tmp)
tmp_z
heatmap(as.matrix(tmp_z), Rowv = NA,Colv = NA,col=cm.colors(256))
std(tmp_z)
std(tmp_z[1,])
var(tmp_z[1,])
var(tmp_z[,1])
maen(tmp_z[,1])
mean(tmp_z[,1])
hist( tmp[,1])
hist( tmp[1,])
# virtual data
tmp=gexp[c("HIF1A","EPAS1","GAPDH"),]
hist( tmp[1,] )
tmp[1,]
hist( as,vector(tmp[1,]) )
hist( as.vector(tmp[1,]) )
hist( as.numeric(tmp[1,]) )
library(maftools)
annovarToMaf("/Users/takamatsushiro/Desktop/JGOG3025_TGS/all/variation_list/text/TS_9582_001.annotation.txt",
refBuild = "hg19")
?annovarToMaf()
library(TCGAutils)
UUIDtoBarcode("5632f8dc-6bed-4bbd-be97-3b2512028431")
UUIDtoUUID("5632f8dc-6bed-4bbd-be97-3b2512028431")
UUIDtoUUID("5632f8dc-6bed-4bbd-be97-3b2512028431")
getwd()
setwd("/Users/takamatsushiro/Desktop/pancancer_TMB_MSI_IRS/public_repository/pancancer_MutSig_ICI/analysis_in_R")
library(VennDiagram)
df=read.delim("./TCGA_four_8clusters_for_R_Venn.tsv")
df=read.delim("./TCGA_4callers_8clusters_counts_for_R_Venn.tsv")
m2_1=  rownames( df[df$Mutect2=="SMK",])
m2_2=  rownames( df[df$Mutect2=="UVL",])
m2_3=  rownames( df[df$Mutect2=="APB",])
m2_4=  rownames( df[df$Mutect2=="POL",])
m2_5=  rownames( df[df$Mutect2=="MRD",])
m2_6=  rownames( df[df$Mutect2=="HRD",])
m2_7=  rownames( df[df$Mutect2=="DNS",])
m2_8=  rownames( df[df$Mutect2=="AGE",])
ms_1=  rownames( df[df$MuSE=="SMK",])
ms_2=  rownames( df[df$MuSE=="UVL",])
ms_3=  rownames( df[df$MuSE=="APB",])
ms_4=  rownames( df[df$MuSE=="POL",])
ms_5=  rownames( df[df$MuSE=="MRD",])
ms_6=  rownames( df[df$MuSE=="HRD",])
ms_7=  rownames( df[df$MuSE=="DNS",])
ms_8=  rownames( df[df$MuSE=="AGE",])
vs_1=  rownames( df[df$VarScan2=="SMK",])
vs_2=  rownames( df[df$VarScan2=="UVL",])
vs_3=  rownames( df[df$VarScan2=="APB",])
vs_4=  rownames( df[df$VarScan2=="POL",])
vs_5=  rownames( df[df$VarScan2=="MRD",])
vs_6=  rownames( df[df$VarScan2=="HRD",])
vs_7=  rownames( df[df$VarScan2=="DNS",])
vs_8=  rownames( df[df$VarScan2=="AGE",])
ss_1=  rownames( df[df$SomaticSniper=="SMK",])
ss_2=  rownames( df[df$SomaticSniper=="UVL",])
ss_3=  rownames( df[df$SomaticSniper=="APB",])
ss_4=  rownames( df[df$SomaticSniper=="POL",])
ss_5=  rownames( df[df$SomaticSniper=="MRD",])
ss_6=  rownames( df[df$SomaticSniper=="HRD",])
ss_7=  rownames( df[df$SomaticSniper=="DNS",])
ss_8=  rownames( df[df$SomaticSniper=="AGE",])
# check overlapping
c1=list("Mutect2"=m2_1,"MuSE"=ms_1,"VarScan2"=vs_1,"SomaticSinper"=ss_1)
c2=list("Mutect2"=m2_2,"MuSE"=ms_2,"VarScan2"=vs_2,"SomaticSinper"=ss_2)
c3=list("Mutect2"=m2_3,"MuSE"=ms_3,"VarScan2"=vs_3,"SomaticSinper"=ss_3)
c4=list("Mutect2"=m2_4,"MuSE"=ms_4,"VarScan2"=vs_4,"SomaticSinper"=ss_4)
c5=list("Mutect2"=m2_5,"MuSE"=ms_5,"VarScan2"=vs_5,"SomaticSinper"=ss_5)
c6=list("Mutect2"=m2_6,"MuSE"=ms_6,"VarScan2"=vs_6,"SomaticSinper"=ss_6)
c7=list("Mutect2"=m2_7,"MuSE"=ms_7,"VarScan2"=vs_7,"SomaticSinper"=ss_7)
c8=list("Mutect2"=m2_8,"MuSE"=ms_8,"VarScan2"=vs_8,"SomaticSinper"=ss_8)
# output prefix
out="../results/Venn_diagrames_for"
cname="SMK"
png()
venn.diagram(c1,filename=paste0(out,"_",cname,".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
clusters=c(c1,c2,c3,c4,c5,c6,c7,c8)
for (i in 1:length(cnames)){
png()
venn.diagram(clusters[i],filename=paste0(out,"_",cnames[i],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
}
cnames=c("SMK","UVL","APB","POL","MRD","HRD","DNS","AGE")
clusters=c(c1,c2,c3,c4,c5,c6,c7,c8)
for (i in 1:length(cnames)){
png()
venn.diagram(clusters[i],filename=paste0(out,"_",cnames[i],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
}
c1
# output prefix
out="../results/Venn_diagrames_for"
cname="SMK"
png()
venn.diagram(c1,filename=paste0(out,"_",cname,".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
length(cnames)
clusters[2]
clusters[3]
clusters[4]
c4
clusters[4]
clusters
clusters$Mutect2
clusters[1][1]
png()
venn.diagram(c2,filename=paste0(out,"_",cnames[2],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c3,filename=paste0(out,"_",cnames[3],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c4,filename=paste0(out,"_",cnames[4],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c5,filename=paste0(out,"_",cnames[5],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c6,filename=paste0(out,"_",cnames[6],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c7,filename=paste0(out,"_",cnames[7],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c8,filename=paste0(out,"_",cnames[8],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
?venn.diagram()
