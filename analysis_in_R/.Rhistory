mean(tmp_z[,1])
hist( tmp[,1])
hist( tmp[1,])
# virtual data
tmp=gexp[c("HIF1A","EPAS1","GAPDH"),]
hist( tmp[1,] )
tmp[1,]
hist( as,vector(tmp[1,]) )
hist( as.vector(tmp[1,]) )
hist( as.numeric(tmp[1,]) )
library(maftools)
annovarToMaf("/Users/takamatsushiro/Desktop/JGOG3025_TGS/all/variation_list/text/TS_9582_001.annotation.txt",
refBuild = "hg19")
?annovarToMaf()
library(TCGAutils)
UUIDtoBarcode("5632f8dc-6bed-4bbd-be97-3b2512028431")
UUIDtoUUID("5632f8dc-6bed-4bbd-be97-3b2512028431")
UUIDtoUUID("5632f8dc-6bed-4bbd-be97-3b2512028431")
getwd()
setwd("/Users/takamatsushiro/Desktop/pancancer_TMB_MSI_IRS/public_repository/pancancer_MutSig_ICI/analysis_in_R")
library(VennDiagram)
df=read.delim("./TCGA_four_8clusters_for_R_Venn.tsv")
df=read.delim("./TCGA_4callers_8clusters_counts_for_R_Venn.tsv")
m2_1=  rownames( df[df$Mutect2=="SMK",])
m2_2=  rownames( df[df$Mutect2=="UVL",])
m2_3=  rownames( df[df$Mutect2=="APB",])
m2_4=  rownames( df[df$Mutect2=="POL",])
m2_5=  rownames( df[df$Mutect2=="MRD",])
m2_6=  rownames( df[df$Mutect2=="HRD",])
m2_7=  rownames( df[df$Mutect2=="DNS",])
m2_8=  rownames( df[df$Mutect2=="AGE",])
ms_1=  rownames( df[df$MuSE=="SMK",])
ms_2=  rownames( df[df$MuSE=="UVL",])
ms_3=  rownames( df[df$MuSE=="APB",])
ms_4=  rownames( df[df$MuSE=="POL",])
ms_5=  rownames( df[df$MuSE=="MRD",])
ms_6=  rownames( df[df$MuSE=="HRD",])
ms_7=  rownames( df[df$MuSE=="DNS",])
ms_8=  rownames( df[df$MuSE=="AGE",])
vs_1=  rownames( df[df$VarScan2=="SMK",])
vs_2=  rownames( df[df$VarScan2=="UVL",])
vs_3=  rownames( df[df$VarScan2=="APB",])
vs_4=  rownames( df[df$VarScan2=="POL",])
vs_5=  rownames( df[df$VarScan2=="MRD",])
vs_6=  rownames( df[df$VarScan2=="HRD",])
vs_7=  rownames( df[df$VarScan2=="DNS",])
vs_8=  rownames( df[df$VarScan2=="AGE",])
ss_1=  rownames( df[df$SomaticSniper=="SMK",])
ss_2=  rownames( df[df$SomaticSniper=="UVL",])
ss_3=  rownames( df[df$SomaticSniper=="APB",])
ss_4=  rownames( df[df$SomaticSniper=="POL",])
ss_5=  rownames( df[df$SomaticSniper=="MRD",])
ss_6=  rownames( df[df$SomaticSniper=="HRD",])
ss_7=  rownames( df[df$SomaticSniper=="DNS",])
ss_8=  rownames( df[df$SomaticSniper=="AGE",])
# check overlapping
c1=list("Mutect2"=m2_1,"MuSE"=ms_1,"VarScan2"=vs_1,"SomaticSinper"=ss_1)
c2=list("Mutect2"=m2_2,"MuSE"=ms_2,"VarScan2"=vs_2,"SomaticSinper"=ss_2)
c3=list("Mutect2"=m2_3,"MuSE"=ms_3,"VarScan2"=vs_3,"SomaticSinper"=ss_3)
c4=list("Mutect2"=m2_4,"MuSE"=ms_4,"VarScan2"=vs_4,"SomaticSinper"=ss_4)
c5=list("Mutect2"=m2_5,"MuSE"=ms_5,"VarScan2"=vs_5,"SomaticSinper"=ss_5)
c6=list("Mutect2"=m2_6,"MuSE"=ms_6,"VarScan2"=vs_6,"SomaticSinper"=ss_6)
c7=list("Mutect2"=m2_7,"MuSE"=ms_7,"VarScan2"=vs_7,"SomaticSinper"=ss_7)
c8=list("Mutect2"=m2_8,"MuSE"=ms_8,"VarScan2"=vs_8,"SomaticSinper"=ss_8)
# output prefix
out="../results/Venn_diagrames_for"
cname="SMK"
png()
venn.diagram(c1,filename=paste0(out,"_",cname,".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
clusters=c(c1,c2,c3,c4,c5,c6,c7,c8)
for (i in 1:length(cnames)){
png()
venn.diagram(clusters[i],filename=paste0(out,"_",cnames[i],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
}
cnames=c("SMK","UVL","APB","POL","MRD","HRD","DNS","AGE")
clusters=c(c1,c2,c3,c4,c5,c6,c7,c8)
for (i in 1:length(cnames)){
png()
venn.diagram(clusters[i],filename=paste0(out,"_",cnames[i],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
}
c1
# output prefix
out="../results/Venn_diagrames_for"
cname="SMK"
png()
venn.diagram(c1,filename=paste0(out,"_",cname,".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
length(cnames)
clusters[2]
clusters[3]
clusters[4]
c4
clusters[4]
clusters
clusters$Mutect2
clusters[1][1]
png()
venn.diagram(c2,filename=paste0(out,"_",cnames[2],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c3,filename=paste0(out,"_",cnames[3],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c4,filename=paste0(out,"_",cnames[4],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c5,filename=paste0(out,"_",cnames[5],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c6,filename=paste0(out,"_",cnames[6],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c7,filename=paste0(out,"_",cnames[7],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
png()
venn.diagram(c8,filename=paste0(out,"_",cnames[8],".png"),height=280,width = 350,
margin=0.05,fill=c(0), alpha=0.4,lwd=0.5, lty=1,resolution = 300,
fontfamily="Helvetica",cat.fontfamily="Helvetica",cex=0.35,cat.cex = 0.35)
dev.off()
?venn.diagram()
getwd()
setwd("/Users/takamatsushiro/Desktop/pancancer_TMB_MSI_IRS/public_repository/pancancer_MutSig_ICI/analysis_in_R/")
library(mcr)
df=read.delim("../calculation/Nature2018_BLCA_v5_f5_integrated_20210731.tsv",sep="\t")
df=read.delim("../data/Nature2018_BLCA_FM1_WES.tsv",sep="\t")
# invert x,y
y=df$FMOne.mutation.burden.per.MB
x=df$Missense_Mutation
x=df$Missense_Mutation
y=df$FMOne.mutation.burden.per.MB
PB.reg <- mcreg(x,y, method.reg = "PaBa")
write.table(PB.reg@para,"./PB_parameters.tsv",sep="\t",col.names=NA,row.names=T,quote=F)
PB.reg@para
(10-PB.reg@para[1])/PB.reg@para[2]
(10-PB.reg@para[5])/PB.reg@para[6]
(10-PB.reg@para[7])/PB.reg@para[8]
png("Passing_Bablok_regression.png")
plot(x,y, main ="Passing Bablok regression", ylab = "FM-ONE mut per MB", xlab = "WES Missense mutation")
abline(PB.reg@para[1:2], col = "red")
abline(PB.reg@para[5:6], col = "pink")
abline(PB.reg@para[7:8], col = "pink")
dev.off()
png("Passing_Bablok_regression.png",dpi=300)
plot(x,y, main ="Passing Bablok regression", ylab = "FM-ONE mut per MB", xlab = "WES Missense mutation")
abline(PB.reg@para[1:2], col = "red")
abline(PB.reg@para[5:6], col = "pink")
abline(PB.reg@para[7:8], col = "pink")
dev.off()
png("Passing_Bablok_regression.png",res = 300)
plot(x,y, main ="Passing Bablok regression", ylab = "FM-ONE mut per MB", xlab = "WES Missense mutation")
abline(PB.reg@para[1:2], col = "red")
abline(PB.reg@para[5:6], col = "pink")
abline(PB.reg@para[7:8], col = "pink")
?png()
png("Passing_Bablok_regression.png")
plot(x,y, main ="Passing Bablok regression", ylab = "FM-ONE mut per MB", xlab = "WES Missense mutation")
abline(PB.reg@para[1:2], col = "red")
abline(PB.reg@para[5:6], col = "pink")
abline(PB.reg@para[7:8], col = "pink")
dev.off()
png("Passing_Bablok_regression.png")
plot(x,y, main ="Passing Bablok regression", ylab = "FM-ONE mut per MB", xlab = "WES Missense mutation")
abline(PB.reg@para[1:2], col = "red")
abline(PB.reg@para[5:6], col = "pink")
abline(PB.reg@para[7:8], col = "pink")
dev.off()
write.table(PB.reg@para,"./Passing_Bablok_results.tsv",sep="\t",col.names=NA,row.names=T,quote=F)
getwd()
setwd("/Users/takamatsushiro/Desktop/pancancer_TMB_MSI_IRS/public_repository/pancancer_MutSig_ICI/analysis_in_R/")
library(mcr)
df=read.delim("./Nature2018_BLCA_FM1_WES.tsv",sep="\t")
x=df$Missense_Mutation
y=df$FMOne.mutation.burden.per.MB
PB.reg <- mcreg(x,y, method.reg = "PaBa")
write.table(PB.reg@para,"./Passing_Bablok_results.tsv",sep="\t",col.names=NA,row.names=T,quote=F)
png("Passing_Bablok_regression.png")
plot(x,y, main ="Passing Bablok regression", ylab = "FM-ONE mut per MB", xlab = "WES Missense mutation")
abline(PB.reg@para[1:2], col = "red")
abline(PB.reg@para[5:6], col = "pink")
abline(PB.reg@para[7:8], col = "pink")
dev.off()
getwd()
setwd("/Users/takamatsushiro/Desktop/pancancer_TMB_MSI_IRS/public_repository/pancancer_MutSig_ICI/analysis_in_R/")
library(mcr)
df=read.delim("./Nature2018_BLCA_FM1_WES.tsv",sep="\t")
x=df$Missense_Mutation
y=df$FMOne.mutation.burden.per.MB
PB.reg <- mcreg(x,y, method.reg = "PaBa")
write.table(PB.reg@para,"./Passing_Bablok_results.tsv",sep="\t",col.names=NA,row.names=T,quote=F)
png("Passing_Bablok_regression.png")
plot(x,y, main ="Passing Bablok regression", ylab = "FM-ONE mut per MB", xlab = "WES Missense mutation")
abline(PB.reg@para[1:2], col = "red")
abline(PB.reg@para[5:6], col = "pink")
abline(PB.reg@para[7:8], col = "pink")
dev.off()
getwd()
setwd("/Users/takamatsushiro/Desktop/pancancer_TMB_MSI_IRS/public_repository/pancancer_MutSig_ICI/analysis_in_R")
library(clinfun)
df=read.delim("./Smoking4_Sig4_ID3_for_JT_test.tsv",sep="\t")
df=read.delim("./TCGA_smoking4_Sig4_ID3_for_JT_test.tsv",sep="\t")
df=df[!is.na(df$Smoking4_order),]
df$Smoking4_order=as.integer(df$Smoking4_order)
head(df)
# set seed
set.seed(778)
# set seed
set.seed(777)
# calculation
dfw=matrix(nrow = 4,ncol = 3)
vec=c("CancerType","Sig4_ratio","ID3_ratio")
cancers=c("LUAD","LUSC","HNSC","BLCA")
n_perm=2000
for (i in 1:4){
tmp=df[df$CancerType==cancers[i],]
res1=jonckheere.test(x=tmp$Sig4_ratio,
g=tmp$Smoking4_order,
alternative = "increasing",
nperm = n_perm)
res2=jonckheere.test(x=tmp$ID3_ratio,
g=tmp$Smoking4_order,
alternative = "increasing",
nperm = n_perm)
add=c(cancers[i],as.character(res1$p.value),res2$p.value)
dfw[i,]=add
}
colnames(dfw)=c("CancerType","Sig4_ratio","ID3_ratio")
dfw
n_perm=10000
for (i in 1:4){
tmp=df[df$CancerType==cancers[i],]
res1=jonckheere.test(x=tmp$Sig4_ratio,
g=tmp$Smoking4_order,
alternative = "increasing",
nperm = n_perm)
res2=jonckheere.test(x=tmp$ID3_ratio,
g=tmp$Smoking4_order,
alternative = "increasing",
nperm = n_perm)
add=c(cancers[i],as.character(res1$p.value),res2$p.value)
dfw[i,]=add
}
colnames(dfw)=c("CancerType","Sig4_ratio","ID3_ratio")
dfw
n_perm=20000
for (i in 1:4){
tmp=df[df$CancerType==cancers[i],]
res1=jonckheere.test(x=tmp$Sig4_ratio,
g=tmp$Smoking4_order,
alternative = "increasing",
nperm = n_perm)
res2=jonckheere.test(x=tmp$ID3_ratio,
g=tmp$Smoking4_order,
alternative = "increasing",
nperm = n_perm)
add=c(cancers[i],as.character(res1$p.value),res2$p.value)
dfw[i,]=add
}
colnames(dfw)=c("CancerType","Sig4_ratio","ID3_ratio")
dfw
write.table(dfw,"JT_test_results_increasing_nperm20000.tsv",
sep="\t",quote = F,row.names = F)
library(MutationalPatterns)
library(BSgenome)
ref_genome <-"BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
library(GenomicRanges)
library(data.table)
maf=fread("../data/TCGA.ACC.mutect.somatic.maf")
maf=fread("../data/tcga_mafs/TCGA.ACC.mutect.somatic.maf")
#maf=fread(args[1])
if ( grepl("chr", maf$Chromosome[1])==F ) {
maf$Chromosome=paste0("chr",maf$Chromosome)
}
# remove indels
snp=maf$Variant_Type=="SNP"
maf=maf[snp,]
# adjust status
colnames(maf)[which( colnames(maf)=="Reference_Allele" )]="REF"
colnames(maf)[which( colnames(maf)=="Tumor_Seq_Allele2" )]="ALT"
# make grl
colnames(maf)
# make grl
grl=makeGRangesListFromDataFrame(maf,
keep.extra.columns=TRUE,
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field=c("seqnames", "seqname","Chromosome"),
start.field="Start_Position",
end.field="End_Position",
strand.field="Strand",
starts.in.df.are.0based=FALSE,
split.field = "Tumor_Sample_Barcode",
names.field = "Hugo_Symbol")
# 96 mutational profile
mut_mat <- mut_matrix(vcf_list = grl, ref_genome = ref_genome)
?GRangesListFromDataFrame()
?makeGRangesListFromDataFrame()
ref_genome <-"BSgenome.Hsapiens.NCBI.GRCh38"
library(ref_genome, character.only = TRUE)
# make grl
grl=makeGRangesListFromDataFrame(maf,
keep.extra.columns=TRUE,
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field=c("seqnames", "seqname","Chromosome"),
start.field="Start_Position",
end.field="End_Position",
strand.field="Strand",
starts.in.df.are.0based=FALSE,
split.field = "Tumor_Sample_Barcode",
names.field = "Hugo_Symbol")
# 96 mutational profile
mut_mat <- mut_matrix(vcf_list = grl, ref_genome = ref_genome)
ref_genome <-"BSgenome.Hsapiens.NCBI.GRCh38"
# 96 mutational profile
mut_mat <- mut_matrix(vcf_list = grl, ref_genome ="hg38")
ref_genome <-"BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
# 96 mutational profile
mut_mat <- mut_matrix(vcf_list = grl, ref_genome ="hg38")
# 96 mutational profile
mut_mat <- mut_matrix(vcf_list = grl, ref_genome ="UCSC.hg38")
# 96 mutational profile
mut_mat <- mut_matrix(vcf_list = grl, ref_genome =ref_genome)
maf=fread("../data/tcga_mafs/TCGA.ACC.mutect.somatic.maf")
#maf=fread(args[1])
if ( grepl("chr", maf$Chromosome[1])==F ) {
maf$Chromosome=paste0("chr",maf$Chromosome)
}
# remove indels
snp=maf$Variant_Type=="SNP"
maf=maf[snp,]
# adjust status
colnames(maf)[which( colnames(maf)=="Reference_Allele" )]="REF"
colnames(maf)[which( colnames(maf)=="Tumor_Seq_Allele2" )]="ALT"
# make grl
grl=makeGRangesListFromDataFrame(maf,
keep.extra.columns=TRUE,
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field=c("seqnames", "seqname","Chromosome"),
start.field="Start_Position",
end.field="End_Position",
strand.field="Strand",
starts.in.df.are.0based=FALSE,
split.field = "Tumor_Sample_Barcode",
names.field = "Hugo_Symbol")
grl
grl
ref_genome <-"BSgenome.Hsapiens.NCBI.GRCh38"
library(ref_genome, character.only = TRUE)
library(GenomicRanges)
library(data.table)
args=commandArgs(trailingOnly = T)
maf=fread("../data/tcga_mafs/TCGA.ACC.mutect.somatic.maf")
#maf=fread(args[1])
if ( grepl("chr", maf$Chromosome[1])==F ) {
maf$Chromosome=paste0("chr",maf$Chromosome)
}
# remove indels
snp=maf$Variant_Type=="SNP"
maf=maf[snp,]
# adjust status
colnames(maf)[which( colnames(maf)=="Reference_Allele" )]="REF"
colnames(maf)[which( colnames(maf)=="Tumor_Seq_Allele2" )]="ALT"
# make grl
grl=makeGRangesListFromDataFrame(maf,
keep.extra.columns=TRUE,
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field=c("seqnames", "seqname","Chromosome"),
start.field="Start_Position",
end.field="End_Position",
strand.field="Strand",
starts.in.df.are.0based=FALSE,
split.field = "Tumor_Sample_Barcode",
names.field = "Hugo_Symbol")
# 96 mutational profile
mut_mat <- mut_matrix(vcf_list = grl, ref_genome =ref_genome)
ref_genome
maf$Tumor_Sample_Barcode
ref_genome <-"BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
maf=fread("../data/tcga_mafs/TCGA.ACC.mutect.somatic.maf")
#maf=fread(args[1])
if ( grepl("chr", maf$Chromosome[1])==F ) {
maf$Chromosome=paste0("chr",maf$Chromosome)
}
# remove indels
snp=maf$Variant_Type=="SNP"
maf=maf[snp,]
# adjust status
colnames(maf)[which( colnames(maf)=="Reference_Allele" )]="REF"
colnames(maf)[which( colnames(maf)=="Tumor_Seq_Allele2" )]="ALT"
# make grl
grl=makeGRangesListFromDataFrame(maf,
keep.extra.columns=TRUE,
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field=c("seqnames", "seqname","Chromosome"),
start.field="Start_Position",
end.field="End_Position",
strand.field="Strand",
starts.in.df.are.0based=FALSE,
split.field = "Tumor_Sample_Barcode",
names.field = "Hugo_Symbol")
grl
# 96 mutational profile
mut_mat <- mut_matrix(vcf_list = grl, ref_genome =ref_genome)
GenomeInfoDb::genome(grl)
GenomeInfoDb::genome(grl)="hg38"
# 96 mutational profile
mut_mat <- mut_matrix(vcf_list= grl, ref_genome =ref_genome)
# COSMIC mutational signatures
cancer_signatures = read.table("../data/cosmic_v2_signatures.tsv"
, sep = "\t", header = TRUE,row.names = 1)
new_order = match(row.names(mut_mat), row.names(cancer_signatures))
cancer_signatures = cancer_signatures[as.vector(new_order),]
cancer_signatures = as.matrix(cancer_signatures[,3:ncol(cancer_signatures)])
#Fit mutation matrix to the COSMIC mutational signatures:
fit_res <- fit_to_signatures(mut_mat, cancer_signatures)
# write out contribution matrix
out_prefix="../results/ACC_mutect"
#out_prefix=args[3]
out_f=paste0(out_prefix,"_mutsig.txt")
write.table( t(fit_res$contribution), out_f
,sep="\t",quote = F,col.names = NA,row.names = T)
out_f2=paste0(out_prefix,"_96_muataions.txt")
write.table( t(mut_mat), out_f2
,sep="\t",quote = F,col.names = NA,row.names = T)
library(MutationalPatterns)
library(BSgenome)
ref_genome <-"BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
library(GenomicRanges)
library(data.table)
library(MutationalPatterns)
library(BSgenome)
ref_genome <-"BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
library(GenomicRanges)
library(data.table)
#example
args=commandArgs(trailingOnly = T)
maf=fread("../data/tcga_mafs/TCGA.ACC.mutect.somatic.maf")
#maf=fread(args[1])
if ( grepl("chr", maf$Chromosome[1])==F ) {
maf$Chromosome=paste0("chr",maf$Chromosome)
}
# remove indels
snp=maf$Variant_Type=="SNP"
maf=maf[snp,]
# adjust status
colnames(maf)[which( colnames(maf)=="Reference_Allele" )]="REF"
colnames(maf)[which( colnames(maf)=="Tumor_Seq_Allele2" )]="ALT"
# make grl
grl=makeGRangesListFromDataFrame(maf,
keep.extra.columns=TRUE,
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field=c("seqnames", "seqname","Chromosome"),
start.field="Start_Position",
end.field="End_Position",
strand.field="Strand",
starts.in.df.are.0based=FALSE,
split.field = "Tumor_Sample_Barcode",
names.field = "Hugo_Symbol")
# 96 mutational profile
mut_mat <- mut_matrix(vcf_list= grl, ref_genome =ref_genome)
GenomeInfoDb::genome(grl)="hg38"
# 96 mutational profile
mut_mat <- mut_matrix(vcf_list= grl, ref_genome =ref_genome)
# COSMIC mutational signatures
cancer_signatures = read.table("../data/cosmic_v2_signatures.tsv"
, sep = "\t", header = TRUE,row.names = 1)
#cancer_signatures = read.table(args[2],sep = "\t", header = TRUE,row.names = 1)
new_order = match(row.names(mut_mat), row.names(cancer_signatures))
cancer_signatures = cancer_signatures[as.vector(new_order),]
cancer_signatures = as.matrix(cancer_signatures[,3:ncol(cancer_signatures)])
#Fit mutation matrix to the COSMIC mutational signatures:
fit_res <- fit_to_signatures(mut_mat, cancer_signatures)
# write out contribution matrix
out_prefix="../results/ACC_mutect"
#out_prefix=args[3]
out_f=paste0(out_prefix,"_mutsig.txt")
write.table( t(fit_res$contribution), out_f
,sep="\t",quote = F,col.names = NA,row.names = T)
out_f2=paste0(out_prefix,"_96_muataions.txt")
write.table( t(mut_mat), out_f2
,sep="\t",quote = F,col.names = NA,row.names = T)
